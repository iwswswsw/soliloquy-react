{"version":3,"sources":["components/_header.jsx","components/_commentAdd.jsx","components/_conversation.jsx","components/Main.jsx","serviceWorker.js","index.js"],"names":["Root","styled","div","Title","h1","InputText","input","attrs","type","ButtonAdd","button","addComment","useState","comment","setComment","value","onChange","e","target","onClick","preventDefault","ConversationDiv","Comment","p","conversations","map","c","i","whoLabel","who","enumWho","user","key","toFixed","chatbot","cbComments","setConversations","userConversation","setTimeout","cbConversation","Math","floor","random","length","addCbComment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+mBAGA,IAAMA,EAAOC,IAAOC,IAAV,KAOJC,EAAQF,IAAOG,GAAV,KAKI,oBACb,kBAACJ,EAAD,KACE,kBAACG,EAAD,yC,ySCdJ,IAAMH,EAAOC,IAAOC,IAAV,KAKJG,EAAYJ,IAAOK,MAAMC,MAAM,CAAEC,KAAM,QAA3BP,CAAH,KAITQ,EAAYR,IAAOS,OAAV,KAIA,cAAmB,IAAjBC,EAAgB,EAAhBA,WAAgB,EACDC,mBAAS,IADR,mBACxBC,EADwB,KACfC,EADe,KAa/B,OACE,kBAAC,EAAD,KACE,8BACE,kBAACT,EAAD,CAAWU,MAAOF,EAASG,SAbR,SAACC,GACxBH,EAAWG,EAAEC,OAAOH,UAahB,kBAACN,EAAD,CAAWD,KAAK,SAASW,QAVV,SAACF,GACpBA,EAAEG,iBACFT,EAAWE,GACXC,EAAW,MAOP,mB,sUC7BR,IAAMd,EAAOC,IAAOC,IAAV,KAIJmB,EAAkBpB,IAAOC,IAAV,KAMfoB,EAAUrB,IAAOsB,EAAV,KAIE,kBAAEC,EAAF,EAAEA,cAAF,OACb,kBAAC,EAAD,KACE,kBAACH,EAAD,KAEIG,EAAcC,KAAI,SAACC,EAAGC,GACpB,IAAMC,EAAWF,EAAEG,MAAQC,EAAQC,KAAO,MAAQ,UAClD,OAAQ,kBAACT,EAAD,CAASU,IAAKL,EAAEM,WAAYL,EAA5B,KAAwCF,EAAEb,e,qEClB5D,IAAMb,EAAOC,IAAOC,IAAV,KAEG4B,EAAU,CACrBC,KAAM,EACNG,QAAS,GAGLC,EAAa,CAAC,qBAAO,2BAAQ,qBAAO,uCAAU,gBAIrC,aAAM,MAEuBvB,mBAAS,IAFhC,mBAEZY,EAFY,KAEGY,EAFH,KAgBnB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYzB,WATG,SAACE,GAClB,IAAMwB,EAAmB,CAAER,IAAKC,EAAQC,KAAMlB,WAC9CuB,EAAiB,GAAD,mBAAKZ,GAAL,CAAoBa,KACpCC,YAAW,kBATQ,SAACD,GACpB,IAAME,EAAiB,CAAEV,IAAKC,EAAQI,QAASrB,QAPvBsB,EAAWK,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMN,EAAWQ,WAQpFP,EAAiB,GAAD,mBAAKZ,GAAL,CAAoBa,EAAkBE,KAOrCK,CAAaP,KAAmB,QAO/C,kBAAC,EAAD,CAAcb,cAAeA,MCzBfqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d1d8ae4.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  display: flex;\n  height: 70px;\n  background-color: #333;\n  box-shadow: 0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12);\n`;\n\nconst Title = styled.h1`\n  font-size: 1.5em;\n  margin: auto 30px;\n`;\n\nexport default () => (\n  <Root>\n    <Title>ひとりごと</Title>\n  </Root>\n);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  text-align: center;\n  margin: 20px auto;\n`;\n\nconst InputText = styled.input.attrs({ type: 'text' })`\n  width: 400px;\n`;\n\nconst ButtonAdd = styled.button`\n  margin-left: 10px;\n`;\n\nexport default ({addComment}) => {\n  const [comment, setComment] = useState('');\n\n  const handleChangeText = (e) => {\n    setComment(e.target.value);\n  };\n\n  const handleButton = (e) => {\n    e.preventDefault();\n    addComment(comment);\n    setComment('');\n  };\n\n  return (\n    <Root>\n      <form>\n        <InputText value={comment} onChange={handleChangeText} />\n        <ButtonAdd type=\"submit\" onClick={handleButton}>呟く</ButtonAdd>\n      </form>\n    </Root>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { enumWho } from './Main';\n\nconst Root = styled.div`\n  padding: 0 100px;\n`;\n\nconst ConversationDiv = styled.div`\n  background-color: #333;\n  border-radius: 4px;\n  padding: 20px 30px;\n`;\n\nconst Comment = styled.p`\n  padding: 5px 0;\n`;\n\nexport default ({conversations}) => (\n  <Root>\n    <ConversationDiv>\n      {\n        conversations.map((c, i) => {\n          const whoLabel = c.who === enumWho.user ? 'you' : 'chatbot';\n          return (<Comment key={i.toFixed()}>{whoLabel}: {c.comment}</Comment>);\n        })\n      }\n    </ConversationDiv>\n  </Root>\n);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Header from './_header';\nimport CommentAdd from './_commentAdd';\nimport Conversation from './_conversation';\n\nconst Root = styled.div``;\n\nexport const enumWho = {\n  user: 0,\n  chatbot: 1,\n};\n\nconst cbComments = ['へぇ〜', 'なるほど', 'いいね', 'やりますねぇ', 'うん']\n\nconst getCbComment = () => (cbComments[Math.floor(Math.random() * Math.floor(cbComments.length))]);\n\nexport default () => {\n  // conversation: {who: enumWho, comment: string}[]\n  const [conversations, setConversations] = useState([]);\n\n  const addCbComment = (userConversation) => {\n    const cbConversation = { who: enumWho.chatbot, comment: getCbComment() };\n    setConversations([...conversations, userConversation, cbConversation]);\n  };\n\n  // comment: string\n  const addComment = (comment) => {\n    const userConversation = { who: enumWho.user, comment };\n    setConversations([...conversations, userConversation]);\n    setTimeout(() => addCbComment(userConversation), 800);\n  };\n\n  return (\n    <Root>\n      <Header />\n      <CommentAdd addComment={addComment} />\n      <Conversation conversations={conversations} />\n    </Root>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.scss';\nimport Main from './components/Main.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}